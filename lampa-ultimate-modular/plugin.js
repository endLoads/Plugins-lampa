(() => {
    // –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ API –ø–ª–∞–≥–∏–Ω–æ–≤ LAMPA
    const initPlugin = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if (window.Plugin && typeof Plugin.register === 'function') {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
            Plugin.register('ultimate_modular', {
                version: '1.0.0',
                icon: 'icon.png',
                init: function() {
                    console.log('[Ultimate Modular] Plugin initialized!');

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    const LUM = {
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ themes.js)
        themes: {
            dark_teal: {
                name: "–¢–µ–º–Ω–∞—è –±–∏—Ä—é–∑–æ–≤–∞—è",
                colors: {
                    '--primary': '#00c8c8',
                    '--secondary': '#007a7a',
                    '--accent': '#ff3c5a',
                    '--dark': '#0f1a1f',
                    '--card-bg': '#1a2a2f',
                    '--text': '#e0f0f0'
                }
            }
        },
        
        settings: {
            theme: 'dark_teal',
            cardSize: 120,
            animations: true,
            activeModules: ['cards', 'ratings', 'vpn']
        },
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init: function() {
            this.loadThemes(() => {
                this.applyTheme();
                this.loadCSS();
                this.loadModules();
                this.addMenu();
                console.log('Ultimate Modular initialized');
            });
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        loadThemes: function(callback) {
            const themesScript = document.createElement('script');
            themesScript.src = 'https://[your-username].github.io/lampa-ultimate-modular/assets/themes.js';
            themesScript.onload = () => {
                if (window.LUM_Themes) {
                    this.themes = window.LUM_Themes;
                    console.log('Themes loaded:', Object.keys(this.themes).length);
                }
                if (callback) callback();
            };
            themesScript.onerror = () => {
                console.error('Failed to load themes');
                if (callback) callback();
            };
            document.head.appendChild(themesScript);
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSS
        loadCSS: function() {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = 'https://[your-username].github.io/lampa-ultimate-modular/assets/styles.css';
            document.head.appendChild(link);
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
        loadModules: function() {
            this.settings.activeModules.forEach(module => {
                const script = document.createElement('script');
                script.src = `https://[your-username].github.io/lampa-ultimate-modular/modules/${module}.js`;
                script.async = true;
                document.head.appendChild(script);
            });
        },
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        addMenu: function() {
            Lampa.SettingsMenu.add('ultimate_modular', {
                name: 'Ultimate Modular',
                icon: 'https://[your-username].github.io/lampa-ultimate-modular/icon.png',
                component: {
                    template: `
                        <div class="settings">
                            <div class="settings__title">Ultimate Modular</div>
                            <div class="settings-list">
                                <div class="settings-list__item" data-component="themes"></div>
                                <div class="settings-list__item" data-component="modules"></div>
                                <div class="settings-list__item" data-component="profiles"></div>
                            </div>
                        </div>
                    `,
                    mounted() {
                        this.renderComponents();
                    },
                    renderComponents() {
                        this.html.find('[data-component="themes"]').html(this.renderThemes());
                        this.html.find('[data-component="modules"]').html(this.renderModules());
                        this.html.find('[data-component="profiles"]').html(this.renderProfiles());
                    },
                    renderThemes() {
                        return `
                            <div class="lum-theme-selector">
                                <div class="lum-title">–í—ã–±–æ—Ä —Ç–µ–º—ã</div>
                                <div class="lum-themes-grid">
                                    ${Object.entries(LUM.themes).map(([id, theme]) => `
                                        <div class="lum-theme-option" data-theme="${id}" 
                                            style="background: linear-gradient(135deg, 
                                                ${theme.colors['--dark'] || '#0f1a1f'}, 
                                                ${theme.colors['--card-bg'] || '#1a2a2f'})">
                                            <div class="lum-theme-name">${theme.name}</div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        `;
                    },
                    renderModules() {
                        return `
                            <div class="lum-module-manager">
                                <div class="lum-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏</div>
                                <div class="lum-modules-list">
                                    <div class="lum-module-item">
                                        <label class="lum-switch">
                                            <input type="checkbox" checked data-module="cards">
                                            <span class="lum-slider"></span>
                                        </label>
                                        <div class="lum-module-info">
                                            <div class="lum-module-icon">üé¨</div>
                                            <div>
                                                <div class="lum-module-name">–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</div>
                                                <div class="lum-module-desc">–ë–µ–π–¥–∂–∏, –ª–æ–≥–æ—Ç–∏–ø—ã, –¥–µ–π—Å—Ç–≤–∏—è</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="lum-module-item">
                                        <label class="lum-switch">
                                            <input type="checkbox" checked data-module="ratings">
                                            <span class="lum-slider"></span>
                                        </label>
                                        <div class="lum-module-info">
                                            <div class="lum-module-icon">‚≠ê</div>
                                            <div>
                                                <div class="lum-module-name">–†–µ–π—Ç–∏–Ω–≥–∏</div>
                                                <div class="lum-module-desc">IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="lum-module-item">
                                        <label class="lum-switch">
                                            <input type="checkbox" checked data-module="vpn">
                                            <span class="lum-slider"></span>
                                        </label>
                                        <div class="lum-module-info">
                                            <div class="lum-module-icon">üõ°Ô∏è</div>
                                            <div>
                                                <div class="lum-module-name">VPN Checker</div>
                                                <div class="lum-module-desc">–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="lum-module-item">
                                        <label class="lum-switch">
                                            <input type="checkbox" data-module="analytics">
                                            <span class="lum-slider"></span>
                                        </label>
                                        <div class="lum-module-info">
                                            <div class="lum-module-icon">üìä</div>
                                            <div>
                                                <div class="lum-module-name">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                                                <div class="lum-module-desc">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    },
                    renderProfiles() {
                        return `
                            <div class="lum-profile-manager">
                                <div class="lum-title">–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫</div>
                                <div class="lum-profile-actions">
                                    <div class="lum-button" data-action="save-tv">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å TV –ø—Ä–æ—Ñ–∏–ª—å</div>
                                    <div class="lum-button" data-action="save-mobile">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Mobile –ø—Ä–æ—Ñ–∏–ª—å</div>
                                </div>
                            </div>
                        `;
                    }
                }
            });
        },
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        applyTheme: function() {
            const theme = this.themes[this.settings.theme] || this.themes.dark_teal;
            if (!theme) return;
            
            Object.entries(theme.colors).forEach(([key, value]) => {
                document.documentElement.style.setProperty(key, value);
            });
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
            document.body.classList.add('theme-changing');
            setTimeout(() => {
                document.body.classList.remove('theme-changing');
            }, 500);
            
            console.log(`Theme applied: ${this.settings.theme}`);
        },
        
        // –°–º–µ–Ω–∞ —Ç–µ–º—ã
        changeTheme: function(themeId) {
            if (!this.themes[themeId]) {
                console.error(`Theme not found: ${themeId}`);
                return;
            }
            
            this.settings.theme = themeId;
            this.applyTheme();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            localStorage.setItem('lum_theme', themeId);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('click', (e) => {
        // –°–º–µ–Ω–∞ —Ç–µ–º—ã
        const themeOption = e.target.closest('.lum-theme-option');
        if (themeOption) {
            const themeId = themeOption.dataset.theme;
            LUM.changeTheme(themeId);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
        const profileButton = e.target.closest('.lum-button');
        if (profileButton && profileButton.dataset.action) {
            if (profileButton.dataset.action === 'save-tv') {
                LUM.saveProfile('tv', {
                    cardSize: 130,
                    theme: LUM.settings.theme,
                    activeModules: ['cards', 'ratings', 'vpn']
                });
                Lampa.Noty.show('TV –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
            }
            else if (profileButton.dataset.action === 'save-mobile') {
                LUM.saveProfile('mobile', {
                    cardSize: 100,
                    theme: LUM.settings.theme,
                    activeModules: ['cards', 'ratings']
                });
                Lampa.Noty.show('Mobile –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
            }
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    LUM.saveProfile = function(name, settings) {
        const profile = {
            name,
            ...settings,
            timestamp: Date.now()
        };
        
        localStorage.setItem(`lum_profile_${name}`, JSON.stringify(profile));
        localStorage.setItem('lum_current_profile', name);
        console.log(`Profile saved: ${name}`);
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ localStorage
    const savedTheme = localStorage.getItem('lum_theme');
    if (savedTheme) {
        LUM.settings.theme = savedTheme;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lampa
    Lampa.Listener.follow('app', (e) => {
        if (e.type === 'ready') {
            LUM.init();
        }
    });

})(window.Plugin = window.Plugin || {});
 // –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    Lampa.Listener.follow('app', (e) => {
                        if (e.type === 'ready') {
                            const button = document.createElement('div');
                            button.innerHTML = `
                                <div class="selector __margined __compact">
                                    <div class="selector__title">Ultimate Modular</div>
                                </div>
                            `;
                            button.style.margin = '15px';
                            button.style.cursor = 'pointer';
                            button.addEventListener('click', () => {
                                alert('Ultimate Modular Plugin is working!');
                            });
                            
                            const header = document.querySelector('.head__content');
                            if (header) header.appendChild(button);
                        }
                    });
                },
                destroy: function() {
                    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
                    console.log('[Ultimate Modular] Plugin destroyed');
                }
            });
        } else {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 100–º—Å –µ—Å–ª–∏ API –Ω–µ –≥–æ—Ç–æ–≤–æ
            setTimeout(initPlugin, 100);
        }
    };

    // –°—Ç–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (document.readyState === 'complete') {
        initPlugin();
    } else {
        window.addEventListener('load', initPlugin);
    }
})();
